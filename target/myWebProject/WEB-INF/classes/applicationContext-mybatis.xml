<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	                    http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	                    http://www.springframework.org/schema/aop
	                    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context-4.2.xsd"
       default-lazy-init="true">

    <!--3、配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>

        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!--扫描model包,使用别名,多个用;隔开-->
        <property name="typeAliasesPackage" value="com.heijia.**.model.**"/>

        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:com/heijia/**/sqlmap/**/*.xml"/>
        <property name="configurationProperties">
            <props><prop key="callSettersOnNulls">true</prop></props>
        </property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            <!--数据库类型  -->
                            dialect=mysql
                            <!-- 该参数默认为false -->
                            <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
                            <!-- 和startPage中的pageNum效果一样 -->
                            offsetAsPageNum=true
                            <!-- 该参数默认为false -->
                            <!-- 设置为true时，使用RowBounds分页会进行count查询 -->
                            rowBoundsWithCount=true
                            <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
                            <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） -->
                            pageSizeZero=true
                            <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
                            <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
                            <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
                            reasonable=true
                            <!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
                            <!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
                            <!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 -->
                            <!-- params=pageNum=start;pageSize=limit;pageSizeZero=zero;reasonable=heli;count=contsql -->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--4、配置扫描mapper接口包,动态实现mapper接口,注入到spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Storage接口-->
        <property name="basePackage" value="com.heijia.**.mapper.**"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--扫描service包(包含子包)下所有使用注解的类型-->
    <!--<context:component-scan base-package="com.heijia.**.service.**"/>-->

    <!--配置基于注解的声明式事务,默认使用注解来管理事务行为-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>